-- default value
SHOW GP_ENABLE_QUERY_METRICS;
 gp_enable_query_metrics 
-------------------------
 on
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- turn off
SET GP_ENABLE_QUERY_METRICS=OFF;
SHOW GP_ENABLE_QUERY_METRICS;
 gp_enable_query_metrics 
-------------------------
 off
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- turn on
SET GP_ENABLE_QUERY_METRICS=ON;
SHOW GP_ENABLE_QUERY_METRICS;
 gp_enable_query_metrics 
-------------------------
 on
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- turn off
SET GP_ENABLE_QUERY_METRICS=OFF;
SHOW GP_ENABLE_QUERY_METRICS;
 gp_enable_query_metrics 
-------------------------
 off
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- reset
RESET GP_ENABLE_QUERY_METRICS;
SHOW GP_ENABLE_QUERY_METRICS;
 gp_enable_query_metrics 
-------------------------
 on
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- default value
SHOW GP_QUERY_METRICS_PORT;
 gp_query_metrics_port 
-----------------------
 9898
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

SHOW GP_MAX_SHMEM_INSTRUMENTS;
 gp_max_shmem_instruments 
--------------------------
 30000
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- start_ignore
DROP SCHEMA IF EXISTS QUERY_METRICS CASCADE; 
NOTICE:  schema "query_metrics" does not exist, skipping
CREATE SCHEMA QUERY_METRICS;
SET SEARCH_PATH=QUERY_METRICS;
CREATE EXTERNAL WEB TABLE __gp_localid
(
    localid    int
)
EXECUTE E'echo $GP_SEGMENT_ID' FORMAT 'TEXT';
GRANT SELECT ON TABLE __gp_localid TO public;
CREATE EXTERNAL WEB TABLE __gp_masterid
(
    masterid    int
)
EXECUTE E'echo $GP_SEGMENT_ID' ON MASTER FORMAT 'TEXT';
GRANT SELECT ON TABLE __gp_masterid TO public;
CREATE FUNCTION gp_instrument_shmem_summary_f()
RETURNS SETOF RECORD
AS '$libdir/gp_instrument_shmem', 'gp_instrument_shmem_summary'
LANGUAGE C IMMUTABLE;
GRANT EXECUTE ON FUNCTION gp_instrument_shmem_summary_f() TO public;
CREATE VIEW gp_instrument_shmem_summary AS
WITH all_entries AS (
  SELECT C.*
    FROM __gp_localid, gp_instrument_shmem_summary_f() as C (
      segid int, num_free bigint, num_used bigint
    )
  UNION ALL
  SELECT C.*
    FROM __gp_masterid, gp_instrument_shmem_summary_f() as C (
      segid int, num_free bigint, num_used bigint
    ))
SELECT segid, num_free, num_used
FROM all_entries
ORDER BY segid;
GRANT SELECT ON gp_instrument_shmem_summary TO public;
CREATE TABLE a (id int) DISTRIBUTED BY (id);
INSERT INTO a SELECT * FROM generate_series(1, 50);
SET OPTIMIZER=OFF;
ANALYZE a;
CREATE TABLE expected (segid int, free bigint, used bigint);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
CREATE TABLE results (segid int, free bigint, used bigint);
NOTICE:  Table doesn't have 'DISTRIBUTED BY' clause -- Using column named 'segid' as the Greenplum Database data distribution key for this table.
HINT:  The 'DISTRIBUTED BY' clause determines the distribution of data. Make sure column(s) chosen are the optimal data distribution key to minimize skew.
set gp_enable_query_metrics=off;
INSERT INTO expected SELECT * FROM gp_instrument_shmem_summary WHERE segid = -1;
INSERT INTO expected SELECT * FROM gp_instrument_shmem_summary WHERE segid = 0;
INSERT INTO expected SELECT * FROM gp_instrument_shmem_summary WHERE segid = 1;
set gp_enable_query_metrics=on;
-- end_ignore
-- regression to EXPLAN ANALZE
EXPLAIN ANALYZE SELECT 1/0;
NOTICE:  division by zero
EXPLAIN ANALYZE SELECT count(*) FROM a where id < (1/(select count(*) where 1=0));
NOTICE:  division by zero  (seg0 slice1 10.152.10.131:41300 pid=2324)
EXPLAIN ANALYZE SELECT count(*) FROM a a1, a a2, a a3;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=5423.26..5423.27 rows=1 width=8)
   Rows out:  1 rows with 50 ms to end.
   ->  Gather Motion 2:1  (slice3; segments: 2)  (cost=5423.20..5423.24 rows=1 width=8)
         Rows out:  2 rows at destination with 48 ms to first row, 50 ms to end.
         ->  Aggregate  (cost=5423.20..5423.21 rows=1 width=8)
               Rows out:  Avg 1.0 rows x 2 workers.  Max 1 rows (seg0) with 47 ms to end.
               ->  Nested Loop  (cost=8.20..5110.70 rows=62500 width=0)
                     Rows out:  Avg 62500.0 rows x 2 workers.  Max 62500 rows (seg0) with 7.185 ms to first row, 41 ms to end.
                     ->  Nested Loop  (cost=4.10..106.60 rows=1250 width=0)
                           Rows out:  Avg 1250.0 rows x 2 workers.  Max 1250 rows (seg0) with 1.009 ms to first row, 1.419 ms to end.
                           ->  Seq Scan on a a1  (cost=0.00..2.50 rows=25 width=0)
                                 Rows out:  Avg 25.0 rows x 2 workers.  Max 25 rows (seg0) with 0.069 ms to first row, 0.103 ms to end.
                           ->  Materialize  (cost=4.10..5.10 rows=50 width=0)
                                 Rows out:  Avg 1250.0 rows x 2 workers.  Max 1250 rows (seg0) with 0.939 ms to first row, 1.073 ms to end of 25 scans.
                                 ->  Broadcast Motion 2:2  (slice1; segments: 2)  (cost=0.00..4.00 rows=50 width=0)
                                       Rows out:  Avg 50.0 rows x 2 workers at destination.  Max 50 rows (seg0) with 0.872 ms to first row, 0.894 ms to end.
                                       ->  Seq Scan on a a3  (cost=0.00..2.50 rows=25 width=0)
                                             Rows out:  Avg 25.0 rows x 2 workers.  Max 25 rows (seg0) with 1.286 ms to first row, 1.301 ms to end.
                     ->  Materialize  (cost=4.10..5.10 rows=50 width=0)
                           Rows out:  Avg 62501.0 rows x 2 workers.  Max 62501 rows (seg0) with 6.172 ms to first row, 11 ms to end of 1251 scans.
                           ->  Broadcast Motion 2:2  (slice2; segments: 2)  (cost=0.00..4.00 rows=50 width=0)
                                 Rows out:  Avg 50.0 rows x 2 workers at destination.  Max 50 rows (seg0) with 5.290 ms to first row, 6.045 ms to end.
                                 ->  Seq Scan on a a2  (cost=0.00..2.50 rows=25 width=0)
                                       Rows out:  Avg 25.0 rows x 2 workers.  Max 25 rows (seg0) with 0.115 ms to first row, 0.132 ms to end.
 Slice statistics:
   (slice0)    Executor memory: 386K bytes.
   (slice1)    Executor memory: 159K bytes avg x 2 workers, 159K bytes max (seg0).
   (slice2)    Executor memory: 159K bytes avg x 2 workers, 159K bytes max (seg0).
   (slice3)    Executor memory: 315K bytes avg x 2 workers, 315K bytes max (seg0).
 Statement statistics:
   Memory used: 128000K bytes
 Settings:  optimizer=off
 Optimizer status: legacy query optimizer
 Total runtime: 59.658 ms
(34 rows)

-- start_ignore
set gp_enable_query_metrics=off;
INSERT INTO results SELECT * FROM gp_instrument_shmem_summary WHERE segid = -1;
INSERT INTO results SELECT * FROM gp_instrument_shmem_summary WHERE segid = 0;
INSERT INTO results SELECT * FROM gp_instrument_shmem_summary WHERE segid = 1;
set gp_enable_query_metrics=on;
-- end_ignore
SELECT * FROM expected
EXCEPT
SELECT * FROM results;
 segid | free | used 
-------+------+------
(0 rows)

SELECT * FROM results
EXCEPT
SELECT * FROM expected;
 segid | free | used 
-------+------+------
(0 rows)

-- start_ignore
DROP SCHEMA IF EXISTS QUERY_METRICS CASCADE; 
NOTICE:  drop cascades to table results
NOTICE:  drop cascades to table expected
NOTICE:  drop cascades to table a
NOTICE:  drop cascades to view gp_instrument_shmem_summary
NOTICE:  drop cascades to rule _RETURN on view gp_instrument_shmem_summary
NOTICE:  drop cascades to function gp_instrument_shmem_summary_f()
NOTICE:  drop cascades to external table __gp_masterid
NOTICE:  drop cascades to external table __gp_localid
-- end_ignore
